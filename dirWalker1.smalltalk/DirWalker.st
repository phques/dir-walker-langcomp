Object subclass: #OneDirBase	instanceVariableNames: 'name kids filenames'	classVariableNames: ''	poolDictionaries: ''	category: 'DirWalker'!!OneDirBase commentStamp: 'PhilippeQuesnel 9/25/2011 18:24' prior: 0!Base class, reads directory structure recursively, reproducing in memory.Has a 'walk' method that goes through the structure, call methods to process directories & files.Override it to provide actual processing of dir & files. (cf DirPrinter for an example that prints out the structure)Instance Variables:	name	<String>	kids	<(LinkedList of: OneDirBase)>	filenames	<(Collection of: (ProtoObject | PseudoContext))>!!OneDirBase methodsFor: 'public' stamp: 'PhilippeQuesnel 9/26/2011 19:53'!readAt: dirPath	"reads filenames & then recurses on subdir kids"	| dir |	dir := FileDirectory on: dirPath.	dir exists		ifFalse: [ ^ nil ].	^ self readFrom: dir! !!OneDirBase methodsFor: 'public' stamp: 'PhilippeQuesnel 9/26/2011 19:55'!walk	"traverse/walk-thru our data"	self walkAt: 0.! !!OneDirBase methodsFor: 'initialization' stamp: 'PhilippeQuesnel 9/26/2011 19:53'!initialize	super initialize.	name := ''.	kids := LinkedList new.	filenames := #().! !!OneDirBase methodsFor: 'private' stamp: 'PhilippeQuesnel 9/26/2011 19:52'!readFrom: dir "FileDirectory"	"reads filenames & then recurses on subdir kids"	|kid|	"sanity check"	dir exists ifFalse: [^ nil].		name := dir localName.		"read filenames"	filenames := dir fileNames.		"recurse on subdirs"	dir directoryNames do: [:subdirName|		kid := self class new. "create new kid of same type"		kid := kid readFrom: (dir / subdirName).		kid ifNotNil: [kids addLast: kid].	].		^ self.	"explicit"! !!OneDirBase methodsFor: 'private' stamp: 'PhilippeQuesnel 9/26/2011 19:55'!walkAt: level	"traverse/walk-thru our data"	self processDir: level.	kids do: [:kid | kid walkAt: level + 1].	filenames do: [:filename | self processFile: filename atLevel: level + 1].	! !!OneDirBase methodsFor: 'virtuals' stamp: 'PhilippeQuesnel 9/25/2011 23:04'!processDir: level	"override this"	self subclassResponsibility! !!OneDirBase methodsFor: 'virtuals' stamp: 'PhilippeQuesnel 9/25/2011 23:04'!processFile: filename atLevel: level	"override this"	self subclassResponsibility! !OneDirBase subclass: #DirPrinter	instanceVariableNames: ''	classVariableNames: 'Spaces1024'	poolDictionaries: ''	category: 'DirWalker'!!DirPrinter commentStamp: 'PhilippeQuesnel 9/25/2011 18:27' prior: 0!Subclasses OneDirBase to override the processDir & processFile:atLevel:  methods to protcess the data.This example override prints out the structure, indented (to Transcript)!!DirPrinter methodsFor: 'util' stamp: 'PhilippeQuesnel 9/25/2011 16:24'!spaces: level	|nbSpaces|	nbSpaces := level * 2.	^ Spaces1024 allButLast: (Spaces1024 size - nbSpaces).! !!DirPrinter methodsFor: 'virtuals' stamp: 'PhilippeQuesnel 9/25/2011 16:29'!processDir: level	"override"	Transcript show: (self spaces: level), '+', name, '/'; cr.! !!DirPrinter methodsFor: 'virtuals' stamp: 'PhilippeQuesnel 9/25/2011 16:29'!processFile: filename atLevel: level	"override"	Transcript show: (self spaces: level), filename; cr.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DirPrinter class	instanceVariableNames: ''!!DirPrinter class methodsFor: 'initialization' stamp: 'PhilippeQuesnel 9/25/2011 22:34'!initialize	super initialize.	self initializeSpaces! !!DirPrinter class methodsFor: 'initialization' stamp: 'PhilippeQuesnel 9/25/2011 16:37'!initializeSpaces	"create a string of 1024 spaces"	Spaces1024 := String new: 1024 withAll: $ .! !DirPrinter initialize!