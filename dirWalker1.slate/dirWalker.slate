
define: #OneDirBase 
&slots: {#kids. #filenames. #directory}.

d@(OneDirBase traits) name [d directory locator baseName].
d@(OneDirBase traits) path [d directory locator as: String].

"------------"

d@(OneDirBase traits) initWithName: dirName
[
   d kids: ExtensibleArray new.
   d filenames: ExtensibleArray new.
   d directory: (Directory newNamed: dirName).
   d
].

d@(OneDirBase traits) newNamed: dirName
  [d clone initWithName: dirName].


"------------"

"reads directory contents, recursing on kids/subdirs"
d@(OneDirBase traits) read
[ |dir subdir kid|
   dir: d directory.
   "inform: d name. ##debug"
   
   "get & process dir entries"
    (dir entries) do: 
    [ |:entry|
      "skip '.', '..' && 'hidden' files '.xx'"
      (entry first = $.) ifFalse: 
      [
         "is it a subdir?"
         subdir: (dir childNamed: entry).
         subdir exists ifTrue:
         [
            "recurse on kid subdir"
            kid: (d newNamed: (subdir locator)). "nb; this creates *correct* type when 'subclassed'"
            d kids add: kid.
            kid read.
         ]
         ifFalse: 
         [  "file"
            d filenames add: entry.
         ].
      ].
   ].
].

"traverse the (read to memory) directory tree"
d@(OneDirBase traits) walk &level: level
[
   level ifNil: [level: 0].  "default value"
   
   "process self/dir"
   d processAtLevel: level.
   
   "recurse on kids"
   d kids do: [|:kid| kid walk &level: level + 1].
   
   "process filenames"
   d filenames do: [|:filename| d processFile: filename atLevel: level].
].

d@(OneDirBase traits) processAtLevel: level
[
].

d@(OneDirBase traits) processFile: filename atLevel: level
[
].

"==========="

"'subclass' of OneBaseDir, outputs to console on walk"
addPrototype: #DirPrinter derivedFrom: {OneDirBase}.

DirPrinter addSlot: #_spaces 
            valued: (String new &capacity: 512) `>> [atAllPut: $ ].

"return a (slice of) a string of (level*3) spaces"
_@(DirPrinter traits) spaces: level [DirPrinter _spaces sliceUpTo: (level * 3)].

d@(DirPrinter traits) processAtLevel: level
[
   inform: ((d spaces: level) ; '+' ; d name ; '/').
].

d@(DirPrinter traits) processFile: filename atLevel: level
[
   inform: ((d spaces: level + 1) ; filename).
].

"=========="

"quick sanity check, useful for 1st level, really"
"dir exists ifFalse: [error: d path ; ' doesn\'t exist !']."

addSlot: #d.
addSlot: #name valued: '/home/kwez/toto/self'.

inform: 'OneDirBase  -----'.
d: (OneDirBase newNamed: name).
inform: d path.
inform: d name.
d read. "does nothing"
d walk.

inform: 'DirPrinter -----'.
d: (DirPrinter newNamed: name).
d read.
d walk.

